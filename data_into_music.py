# -*- coding: utf-8 -*-
"""data_into_music.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fUVDjTmOrB2t8C8EtcZcX2DEdGZm7puo
"""

!pip install numpy pydub scipy

!pip install simpleaudio

!pip install numpy pydub scipy simpleaudio

import numpy as np
from scipy.io.wavfile import write
from IPython.display import Audio

# Convert data to frequencies (this is an example, the data could come from anywhere)
data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  # Example data sequence

# Parameters for sound generation
sample_rate = 44100  # Standard sample rate for audio
duration_per_note = 1.0  # Each note duration in seconds

# Function to generate a sine wave of a given frequency
def generate_sine_wave(frequency, duration, sample_rate):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    return np.sin(2 * np.pi * frequency * t)

# Convert data points to frequencies (simple mapping)
frequencies = [100 + i * 50 for i in data]  # Mapping data to a frequency range

# Generate sound for each frequency and combine them
audio_data = np.array([])  # Empty array to hold audio data
for freq in frequencies:
    sine_wave = generate_sine_wave(freq, duration_per_note, sample_rate)
    audio_data = np.concatenate((audio_data, sine_wave))

# Normalize audio data to 16-bit range and convert to int16
audio_data = np.int16(audio_data / np.max(np.abs(audio_data)) * 32767)

# Save the audio data to a temporary WAV file
write("output_music.wav", sample_rate, audio_data)

# Play the audio using IPython.display.Audio
Audio("output_music.wav")















import numpy as np
from scipy.io.wavfile import write
from IPython.display import Audio

# Parameters for sound generation
sample_rate = 44100  # Standard sample rate for audio
duration_per_note = 1.0  # Duration of each note in seconds

# Function to generate a sine wave of a given frequency
def generate_sine_wave(frequency, duration, sample_rate):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    return np.sin(2 * np.pi * frequency * t)

# Data points to convert to frequencies (example data)
data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Map data points to frequencies
frequencies = [220 + i * 20 for i in data]  # Base frequency of 220 Hz, step by 20 Hz

# Generate sound for each frequency and combine them
audio_data = np.concatenate([
    generate_sine_wave(freq, duration_per_note, sample_rate) for freq in frequencies
])

# Normalize the audio data
audio_data = np.int16(audio_data / np.max(np.abs(audio_data)) * 32767)

# Save the audio data to a WAV file
write("output_music.wav", sample_rate, audio_data)

# Play the audio
Audio("output_music.wav")